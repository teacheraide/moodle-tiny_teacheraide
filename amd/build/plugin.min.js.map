{"version":3,"file":"plugin.min.js","sources":["../../vue/src/common.js","../../vue/src/configuration.js","../../vue/src/commands.js","../../vue/src/plugin.js"],"sourcesContent":["export const pluginName = \"tiny_teacheraide/plugin\";\nexport const component = \"tiny_teacheraide\";\nexport const teacherAideMenuItemName = `${component}_menuitem`;\nexport const icon = \"\";\n","import { teacherAideMenuItemName } from \"./common\";\nimport { addMenubarItem, addToolbarButtons } from \"editor_tiny/utils\";\n\nconst getToolbarConfiguration = (instanceConfig) => {\n  let toolbar = instanceConfig.toolbar;\n  toolbar = addToolbarButtons(toolbar, \"content\", [teacherAideMenuItemName]);\n\n  return toolbar;\n};\n\nconst getMenuConfiguration = (instanceConfig) => {\n  let menu = instanceConfig.menu;\n  menu = addMenubarItem(menu, \"tools\", [teacherAideMenuItemName].join(\" \"));\n\n  return menu;\n};\n\nexport const configure = (instanceConfig) => {\n  return {\n    toolbar: getToolbarConfiguration(instanceConfig),\n    menu: getMenuConfiguration(instanceConfig),\n  };\n};\n","import { getString } from \"core/str\";\nimport { component, teacherAideMenuItemName, icon } from \"./common\";\n\nexport const getSetup = async () => {\n  const [buttonTooltip] = await Promise.all([\n    getString(\"pluginname\", component),\n  ]);\n\n  return (editor) => {\n    editor.ui.registry.addMenuItem(teacherAideMenuItemName, {\n      icon,\n      text: buttonTooltip,\n      onAction: () => {\n        // eslint-disable-next-line no-console\n        console.log(\"Teacher Aide Button Clicked\");\n      },\n    });\n  };\n};\n","import { getTinyMCE } from \"editor_tiny/loader\";\nimport { getPluginMetadata } from \"editor_tiny/utils\";\n\nimport { component, pluginName } from \"./common\";\nimport * as Configuration from \"./configuration\";\nimport * as Commands from \"./commands\";\n\n// eslint-disable-next-line no-async-promise-executor\nexport default new Promise(async (resolve) => {\n  const [tinyMCE, pluginMetadata, setupCommands] = await Promise.all([\n    getTinyMCE(),\n    getPluginMetadata(component, pluginName),\n    Commands.getSetup(),\n  ]);\n\n  tinyMCE.PluginManager.add(pluginName, (editor) => {\n    setupCommands(editor);\n\n    return pluginMetadata;\n  });\n\n  resolve([pluginName, Configuration]);\n});\n"],"names":["addToolbarButtons","addMenubarItem","getString","getTinyMCE","getPluginMetadata","Commands.getSetup"],"mappings":";;AAAO,QAAM,aAAa;AACnB,QAAM,YAAY;AAClB,QAAM,0BAA0B,GAAG,SAAS;AAC5C,QAAM,OAAO;ACApB,QAAM,0BAA0B,CAAC,mBAAmB;AAClD,QAAI,UAAU,eAAe;AAC7B,cAAUA,MAAiB,kBAAC,SAAS,WAAW,CAAC,uBAAuB,CAAC;AAEzE,WAAO;AAAA,EACT;AAEA,QAAM,uBAAuB,CAAC,mBAAmB;AAC/C,QAAI,OAAO,eAAe;AAC1B,WAAOC,MAAAA,eAAe,MAAM,SAAS,CAAC,uBAAuB,EAAE,KAAK,GAAG,CAAC;AAExE,WAAO;AAAA,EACT;AAEO,QAAM,YAAY,CAAC,mBAAmB;AAC3C,WAAO;AAAA,MACL,SAAS,wBAAwB,cAAc;AAAA,MAC/C,MAAM,qBAAqB,cAAc;AAAA,IAC7C;AAAA,EACA;;;;;ACnBO,QAAM,WAAW,YAAY;AAClC,UAAM,CAAC,aAAa,IAAI,MAAM,QAAQ,IAAI;AAAA,MACxCC,IAAS,UAAC,cAAc,SAAS;AAAA,IACrC,CAAG;AAED,WAAO,CAAC,WAAW;AACjB,aAAO,GAAG,SAAS,YAAY,yBAAyB;AAAA,QACtD;AAAA,QACA,MAAM;AAAA,QACN,UAAU,MAAM;AAEd,kBAAQ,IAAI,6BAA6B;AAAA,QAC1C;AAAA,MACP,CAAK;AAAA,IACL;AAAA,EACA;ACVA,QAAA,SAAe,IAAI,QAAQ,OAAO,YAAY;AAC5C,UAAM,CAAC,SAAS,gBAAgB,aAAa,IAAI,MAAM,QAAQ,IAAI;AAAA,MACjEC,kBAAY;AAAA,MACZC,MAAiB,kBAAC,WAAW,UAAU;AAAA,MACvCC,SAAmB;AAAA,IACvB,CAAG;AAED,YAAQ,cAAc,IAAI,YAAY,CAAC,WAAW;AAChD,oBAAc,MAAM;AAEpB,aAAO;AAAA,IACX,CAAG;AAED,YAAQ,CAAC,YAAY,aAAa,CAAC;AAAA,EACrC,CAAC;;;"}