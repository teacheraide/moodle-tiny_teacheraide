define(["editor_tiny/loader", "editor_tiny/utils", "core/str"], function(loader, utils, str) {
  "use strict";
  const pluginName = "tiny_teacheraide/plugin";
  const component = "tiny_teacheraide";
  const teacherAideMenuItemName = `${component}_menuitem`;
  const icon = "";
  const getToolbarConfiguration = (instanceConfig) => {
    let toolbar = instanceConfig.toolbar;
    toolbar = utils.addToolbarButtons(toolbar, "content", [teacherAideMenuItemName]);
    return toolbar;
  };
  const getMenuConfiguration = (instanceConfig) => {
    let menu = instanceConfig.menu;
    menu = utils.addMenubarItem(menu, "tools", [teacherAideMenuItemName].join(" "));
    return menu;
  };
  const configure = (instanceConfig) => {
    return {
      toolbar: getToolbarConfiguration(instanceConfig),
      menu: getMenuConfiguration(instanceConfig)
    };
  };
  const Configuration = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    configure
  }, Symbol.toStringTag, { value: "Module" }));
  const getSetup = async () => {
    const [buttonTooltip] = await Promise.all([
      str.getString("pluginname", component)
    ]);
    return (editor) => {
      editor.ui.registry.addMenuItem(teacherAideMenuItemName, {
        icon,
        text: buttonTooltip,
        onAction: () => {
          console.log("Teacher Aide Button Clicked");
        }
      });
    };
  };
  const plugin = new Promise(async (resolve) => {
    const [tinyMCE, pluginMetadata, setupCommands] = await Promise.all([
      loader.getTinyMCE(),
      utils.getPluginMetadata(component, pluginName),
      getSetup()
    ]);
    tinyMCE.PluginManager.add(pluginName, (editor) => {
      setupCommands(editor);
      return pluginMetadata;
    });
    resolve([pluginName, Configuration]);
  });
  return plugin;
});
//# sourceMappingURL=plugin.min.js.map
